import telebot
from telebot import types
import weather
import users
import places
import converter
import random




API_KEY = '1529888724:AAHxeU7A2Vl-8Ock0xiKuvd7c91dhpZV25s'


bot = telebot.TeleBot(API_KEY)

global_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
global_markup.row('–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')
global_markup.row('–ü–æ–≥–æ–¥–∞', '–ö—É—Ä—Å –≤–∞–ª—é—Ç')

secreat_txt, query = '', ''


def get_geo(cid, var):
    if var == 0:
        location_btn = telebot.types.KeyboardButton('–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
        cancel_btn = telebot.types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(cancel_btn, location_btn)

        bot.send_message(cid, '–í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ', reply_markup=markup)
    elif var == 1:
        cancel_btn = telebot.types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(cancel_btn)

        bot.send_message(cid, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ', reply_markup=markup)


def ask_for_geo(cid):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data='0'))
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", callback_data='1'))

    bot.send_message(cid, '–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é?', reply_markup=markup)


def check_user(message):
    uid = message.from_user.id
    if message.from_user.id not in users.get_users().keys():  # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        users.add_user(uid)
        user = users.get_user(uid)


@bot.message_handler(commands=['start'])
def start_message(message):
    cid = message.chat.id
    check_user(message)
    bot.send_message(cid, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω', reply_markup=global_markup)


@bot.message_handler(content_types=['text'])
def send_text(message):
    global secreat_txt, arr_answer
    check_user(message)
    cid = message.chat.id
    uid = message.from_user.id

    user = users.get_user(uid)

    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(cid, '–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?')
    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_message(cid, '–î–æ —Å–≤—è–∑–∏!')
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(cid, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=global_markup)
        # –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif message.text.lower() == '–æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é':
        ask_for_geo(cid)
        # –∑–∞–ø—Ä–æ—Å –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö

    elif message.text.lower() == '–∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å':
        if user.location == {}:  # –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞
            bot.send_message(cid, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')
            ask_for_geo(cid)
        else:
            # –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞
            markup = types.InlineKeyboardMarkup()
            item1 = types.InlineKeyboardButton("–í—Å–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", callback_data='0')
            item2 = types.InlineKeyboardButton("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ üçΩÔ∏è", callback_data='1')
            item3 = types.InlineKeyboardButton("–ú—É–∑–µ–∏ üèõÔ∏è", callback_data='2')
            item4 = types.InlineKeyboardButton("–ü–∞—Ä–∫–∏ üå≥", callback_data='3')
            item5 = types.InlineKeyboardButton("–ö–∏–Ω–æ üé•", callback_data='4')
            item6 = types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω—ã üõí", callback_data='5')
            markup.row(item1)
            markup.row(item2)
            markup.row(item3, item4)
            markup.row(item5, item6)

            bot.send_message(cid, '–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ –Ω–∞–π—Ç–∏? üö∂', reply_markup=markup)

    elif message.text.lower() == '–∫—É—Ä—Å –≤–∞–ª—é—Ç':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–î–æ–ª–ª–∞—Ä $", callback_data='0')
        item5 = types.InlineKeyboardButton("–†–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞", callback_data='2')
        item2 = types.InlineKeyboardButton("–ï–≤—Ä–æ ‚Ç¨", callback_data='1')
        item3 = types.InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç ¬£", callback_data='3')
        item4 = types.InlineKeyboardButton("–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫ ‚Ç£", callback_data='4')
        markup.row(item1, item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(types.InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö", callback_data='5'))

        bot.send_message(cid, '–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)

    elif message.text.lower() == '–ø–æ–≥–æ–¥–∞':
        if user.location == {}: 
            bot.send_message(cid, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')
            ask_for_geo(cid)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", callback_data='0'))
            markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–≥–æ–¥–∞", callback_data='1'))
            markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data='2'))

            bot.send_message(cid, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–≥–æ–¥—ã ‚õÖ', reply_markup=markup)

@bot.message_handler(content_types=['sticker'])
def sticker_id(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIMA1-_elxUNoSiKjuUns_Lsi_QXoI0AAL1AAMw1J0R3NeLwV6aUvUeBA')


@bot.message_handler(content_types=['location'])
def handle_loc(message):
    check_user(message)
    cid = message.chat.id
    uid = message.from_user.id
    user = users.get_user(uid)

    bot.send_message(cid, '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=global_markup)
    user.location = message.location
    user.is_have_location = True
    users.save_users()


def send_places(call, user, cid):
    result = places.get_places(user, bot, call.message, int(call.data), 2)
    if result != 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data=call.data))
        bot.send_message(cid, '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë?', reply_markup=markup)


def get_places_for_opros(user):
    try:
        places.get_all_places(user)
        users.save_users()
    except:
        pass


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global secreat_txt, arr_answer, query
    cid = call.message.chat.id
    uid = call.from_user.id
    user = users.get_user(uid)
    max_num = 0

    try:
        if call.message.text == '–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?':
            print()
            if int(call.data) == 5:
                bot.send_message(cid,
                                 '–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ\n'
                                 ' https://www.banki.ru/products/currency/cash/moskva/#bank-rates')

            else:
                arr_valua = ['–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç', '—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫']
                bot.send_message(cid, '–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã _{}_ \n*{:.2f}* —Ä—É–±–ª–µ–π'.format(arr_valua[int(call.data)],
                                                                                  converter.converter_1(
                                                                                      int(call.data))),
                                 parse_mode='Markdown')

        elif call.message.text == '–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ –Ω–∞–π—Ç–∏? üö∂':
            send_places(call, user, cid)
        elif call.message.text == '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë?':
            send_places(call, user, cid)
        elif call.message.text == '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–≥–æ–¥—ã ‚õÖ':
            # weather.get_weather(user, bot, message)
            if int(call.data) == 0:
                weather.simple_weather(user, bot, call.message)
            if int(call.data) == 1:
                weather.detailed_weather(user, bot, call.message)
            if int(call.data) == 2:
                weather.three_days_weather(user, bot, call.message)

        elif call.message.text == '–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é?':
            get_geo(cid, int(call.data))
    except:
        pass


bot.polling()
